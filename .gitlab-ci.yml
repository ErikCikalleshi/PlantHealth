image: alpine:3.17

services:
  - mysql:latest

variables:
  MYSQL_DATABASE: "db_planthealth"
  MYSQL_ROOT_PASSWORD: "root"
  MYSQL_USER: "springuser"
  MYSQL_PASSWORD: "passwd"
  MYSQL_HOST: mysql
  
stages: # List of stages for jobs, and their order of execution
  # - build
    - testDatabaseService
    - unit-tests 
  # - sonarCheck

.before_script_template:
  before_script:
    - apk add --update maven

testDatabaseService:
  image: python:latest
  stage: testDatabaseService
  script:
    - apt-get update && apt-get install -y git curl libmcrypt-dev default-mysql-client
    - mysql --version
    - sleep 2 
    - echo "DROP DATABASE IF EXISTS ${MYSQL_DATABASE};" | mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "${MYSQL_HOST}" "${MYSQL_DATABASE}"
    # - echo "CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE};" | mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "${MYSQL_HOST}" "${MYSQL_DATABASE}"    
    # - echo "create table userx (username varchar(100) not null, create_date datetime(6) not null, email varchar(255), enabled bit not null, first_name varchar(255), last_name varchar(255), password varchar(255), phone varchar(255), update_date datetime(6), create_user_username varchar(100) not null, update_user_username varchar(100), primary key (username));" | mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "${MYSQL_HOST}" "${MYSQL_DATABASE}"
    # - echo "INSERT INTO userx(username, create_date, create_user_username, email, enabled, first_name, last_name, password, phone) VALUES ('admin', NOW(), 'admin', 'admin@planthealth.at', TRUE, 'Administrator', '','$2a$12$WTHPMXqdUKBZ7b6p7LZZ0.a2JknpnJbAkeGvBJ62.5T1czPebq6cW','');" | mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "${MYSQL_HOST}" "${MYSQL_DATABASE}"    

    - echo "Database host is '${MYSQL_HOST}'"


unit-test-job: # This job runs in the test stage.
  extends: .before_script_template
  stage: unit-tests 
  script:
    - cd ./backend
    - echo "Running unit tests..."
    - mvn test
  allow_failure: true

# sonarqube-check:
#   extends: .before_script_template
#   stage: sonarCheck
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/code/.sonar"
#     GIT_DEPTH: "0"
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - echo "Installing node.js..."
#     - apk add --update nodejs
#     - echo Running sonar analysis for ${SONAR_PROJECT_KEY}
#     # add to sonarqube frontend project (dir ./frontend)
#     - mvn -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.projectName="${CI_PROJECT_NAME} ${GITLAB_USER_NAME}" -Dsonar.sources=src --fail-at-end verify sonar:sonar
#   allow_failure: true

# build site:
#   image: node:16.17.1
#   stage: build
#   script:
#     - cd ./frontend
#     - npm install --progress=false
#     - npm run build
#   artifacts:
#     expire_in: 1 week
#     paths:
#       - dist


